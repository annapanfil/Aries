/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package put.ai.games.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.jar.Attributes;
import java.util.jar.Manifest;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import javax.swing.event.HyperlinkEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import put.ai.games.engine.BoardFactory;
import put.ai.games.game.Board;
import put.ai.games.engine.Callback;
import put.ai.games.engine.GameEngine;
import put.ai.games.game.Player;
import put.ai.games.engine.impl.GameEngineImpl;
import put.ai.games.engine.loaders.MetaPlayerLoader;
import put.ai.games.engine.loaders.PlayerLoadingException;
import put.ai.games.engine.parameters.IntegerParameter;
import put.ai.games.engine.parameters.Parameter;
import put.ai.games.game.Move;
import put.ai.games.rulesprovider.RulesProvider;

public class MainWindow extends javax.swing.JFrame {

    public static final String PREF_SELECTED_GAME = "selected game";
    public static final String PREF_PLAYER1 = "player1";
    public static final String PREF_PLAYER2 = "player2";
    private static final BoardFactory[] AVAILABLE_GAMES = RulesProvider.INSTANCE.getAvailablesRules().toArray(
        new BoardFactory[0]);
    private JFileChooser fileDialog;
    private Player[] players;
    private BoardFactory boardFactory = null;


    public MainWindow() {
        initComponents();
        fileDialog = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Pliki JAR", "jar");
        fileDialog.setFileFilter(filter);
        int lastSelection = getPrefs().getInt(PREF_SELECTED_GAME, 0);
        if (lastSelection >= 0 && lastSelection < gameSelection.getItemCount()) {
            gameSelection.setSelectedIndex(lastSelection);
        }
        gameSelection.setRenderer(new BasicComboBoxRenderer() {

            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected,
                    boolean cellHasFocus) {
                value = ((BoardFactory) value).getName();
                return super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            }
        });
        player1.setText(getPrefs().get(PREF_PLAYER1, ""));
        player2.setText(getPrefs().get(PREF_PLAYER2, ""));
        checkVersion();
    }


    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        boardView = new BoardViewPanel();
        gameInfo = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        nextPlayer = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        player1 = new javax.swing.JTextField();
        player2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        runGame = new javax.swing.JButton();
        selectPlayer1File = new javax.swing.JButton();
        selectPlayer2File = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        boardSize = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        timeout = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        gameSelection = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rules = new javax.swing.JEditorPane();
        versionPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        currentVersion = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        newestVersion = new javax.swing.JLabel();
        checkVersion = new javax.swing.JButton();
        askForUpdate = new javax.swing.JLabel();
        askForUpdate.setVisible(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout boardViewLayout = new javax.swing.GroupLayout(boardView);
        boardView.setLayout(boardViewLayout);
        boardViewLayout.setHorizontalGroup(boardViewLayout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 805, Short.MAX_VALUE));
        boardViewLayout.setVerticalGroup(boardViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 479, Short.MAX_VALUE));

        jLabel5.setText("Następny gracz:");

        javax.swing.GroupLayout gameInfoLayout = new javax.swing.GroupLayout(gameInfo);
        gameInfo.setLayout(gameInfoLayout);
        gameInfoLayout.setHorizontalGroup(gameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(
                    gameInfoLayout
                            .createSequentialGroup()
                            .addContainerGap()
                            .addGroup(
                                gameInfoLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(nextPlayer, javax.swing.GroupLayout.DEFAULT_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        gameInfoLayout.setVerticalGroup(gameInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(
                    gameInfoLayout.createSequentialGroup().addContainerGap().addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(nextPlayer)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel2Layout
                            .createSequentialGroup()
                            .addContainerGap()
                            .addComponent(boardView, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(gameInfo, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()));
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel2Layout
                            .createSequentialGroup()
                            .addContainerGap()
                            .addGroup(
                                jPanel2Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(boardView, javax.swing.GroupLayout.DEFAULT_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(gameInfo, javax.swing.GroupLayout.DEFAULT_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addContainerGap()));

        jTabbedPane1.addTab("Gra", jPanel2);

        jLabel1.setForeground(new java.awt.Color(255, 200, 0));
        jLabel1.setText("Gracz 1:");

        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Gracz 2:");

        runGame.setText("Uruchom grę");
        runGame.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runGameActionPerformed(evt);
            }
        });

        selectPlayer1File.setText("...");
        selectPlayer1File.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPlayer1FileActionPerformed(evt);
            }
        });

        selectPlayer2File.setText("...");
        selectPlayer2File.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPlayer2FileActionPerformed(evt);
            }
        });

        jLabel3.setText("Rozmiar planszy:");

        boardSize.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(8), Integer.valueOf(2), null, Integer
                .valueOf(1)));

        jLabel4.setText("Czas na ruch [ms]:");

        timeout.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(20000), Integer.valueOf(1), null, Integer
                .valueOf(100)));

        jLabel6.setText("<html>\nW polach <code>Gracz 1</code> i <code>Gracz 2</code> należy wskazać pliki JAR z klasami implementującymi sztuczną inteligencję.<br />\nŻeby taka klasa mogła zostać wykorzystana jako gracz muszą być spełnione dwa warunki:\n<ul>\n<li>musi implementować intefejs <code>Player</code></li>\n<li>musi być oznaczona w manifeście pliku JAR jako <code>Main-Class</code></li>\n</ul>\nŻeby samodzielnie zagrać w grę należy zostawić pole odpowiedniego gracza puste.\n</html>");

        jLabel7.setText("Gra:");

        gameSelection.setModel(new DefaultComboBoxModel(AVAILABLE_GAMES));
        gameSelection.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameSelectionActionPerformed(evt);
            }
        });

        jLabel8.setText("Zasady gry:");

        rules.setEditable(false);
        rules.setOpaque(false);
        rules.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {

            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                rulesHyperlinkUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(rules);

        versionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Wersja"));

        jLabel9.setText("Aktualna:");

        currentVersion.setText("0");

        jLabel10.setText("Najnowsza:");

        newestVersion.setText("0");

        checkVersion.setText("Sprawdź");
        checkVersion.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkVersionActionPerformed(evt);
            }
        });

        askForUpdate.setText("Pobierz najnowszą wersję!");

        javax.swing.GroupLayout versionPanelLayout = new javax.swing.GroupLayout(versionPanel);
        versionPanel.setLayout(versionPanelLayout);
        versionPanelLayout.setHorizontalGroup(versionPanelLayout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            versionPanelLayout
                    .createSequentialGroup()
                    .addContainerGap()
                    .addGroup(
                        versionPanelLayout
                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(currentVersion, javax.swing.GroupLayout.DEFAULT_SIZE,
                                    javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE,
                                    javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(newestVersion, javax.swing.GroupLayout.DEFAULT_SIZE,
                                    javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(
                                    javax.swing.GroupLayout.Alignment.TRAILING,
                                    versionPanelLayout.createSequentialGroup().addGap(0, 0, Short.MAX_VALUE)
                                            .addComponent(checkVersion))
                                .addGroup(
                                    versionPanelLayout
                                            .createSequentialGroup()
                                            .addGroup(
                                                versionPanelLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel10).addComponent(askForUpdate))
                                            .addGap(0, 0, Short.MAX_VALUE))).addContainerGap()));
        versionPanelLayout.setVerticalGroup(versionPanelLayout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            versionPanelLayout.createSequentialGroup().addContainerGap().addComponent(jLabel9)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(currentVersion)
                    .addGap(18, 18, 18).addComponent(jLabel10)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(newestVersion)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(askForUpdate)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                    .addComponent(checkVersion).addContainerGap()));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout
                .setHorizontalGroup(jPanel3Layout
                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(
                            jPanel3Layout
                                    .createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(
                                        jPanel3Layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(
                                                    jPanel3Layout.createSequentialGroup().addComponent(jScrollPane1)
                                                            .addContainerGap())
                                                .addGroup(
                                                    javax.swing.GroupLayout.Alignment.TRAILING,
                                                    jPanel3Layout
                                                            .createSequentialGroup()
                                                            .addGap(75, 75, 75)
                                                            .addComponent(gameSelection, 0,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addGap(73, 73, 73))
                                                .addGroup(
                                                    jPanel3Layout.createSequentialGroup().addComponent(jLabel7)
                                                            .addContainerGap())
                                                .addGroup(
                                                    javax.swing.GroupLayout.Alignment.TRAILING,
                                                    jPanel3Layout
                                                            .createSequentialGroup()
                                                            .addGroup(
                                                                jPanel3Layout
                                                                        .createParallelGroup(
                                                                            javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addGroup(
                                                                            jPanel3Layout
                                                                                    .createSequentialGroup()
                                                                                    .addComponent(jLabel2)
                                                                                    .addPreferredGap(
                                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                    .addComponent(player2))
                                                                        .addGroup(
                                                                            javax.swing.GroupLayout.Alignment.LEADING,
                                                                            jPanel3Layout
                                                                                    .createSequentialGroup()
                                                                                    .addComponent(jLabel1)
                                                                                    .addPreferredGap(
                                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                    .addComponent(player1)))
                                                            .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addGroup(
                                                                jPanel3Layout
                                                                        .createParallelGroup(
                                                                            javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(selectPlayer1File)
                                                                        .addComponent(selectPlayer2File,
                                                                            javax.swing.GroupLayout.Alignment.TRAILING)))
                                                .addGroup(
                                                    jPanel3Layout
                                                            .createSequentialGroup()
                                                            .addGroup(
                                                                jPanel3Layout
                                                                        .createParallelGroup(
                                                                            javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(
                                                                            jPanel3Layout
                                                                                    .createSequentialGroup()
                                                                                    .addGroup(
                                                                                        jPanel3Layout
                                                                                                .createParallelGroup(
                                                                                                    javax.swing.GroupLayout.Alignment.LEADING)
                                                                                                .addComponent(jLabel3)
                                                                                                .addComponent(jLabel4))
                                                                                    .addPreferredGap(
                                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                    .addGroup(
                                                                                        jPanel3Layout
                                                                                                .createParallelGroup(
                                                                                                    javax.swing.GroupLayout.Alignment.LEADING,
                                                                                                    false)
                                                                                                .addComponent(timeout)
                                                                                                .addComponent(
                                                                                                    boardSize,
                                                                                                    javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                                    97,
                                                                                                    javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                        .addComponent(runGame)
                                                                        .addComponent(jLabel6,
                                                                            javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                            javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel8))
                                                            .addPreferredGap(
                                                                javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(versionPanel,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addContainerGap()))));
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel3Layout
                            .createSequentialGroup()
                            .addContainerGap()
                            .addGroup(
                                jPanel3Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel7)
                                        .addComponent(gameSelection, javax.swing.GroupLayout.PREFERRED_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                            javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(
                                jPanel3Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(player1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                            javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(selectPlayer1File))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(
                                jPanel3Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(player2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE,
                                            javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(selectPlayer2File))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(
                                jPanel3Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(
                                            jPanel3Layout
                                                    .createSequentialGroup()
                                                    .addGroup(
                                                        jPanel3Layout
                                                                .createParallelGroup(
                                                                    javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(jLabel3)
                                                                .addComponent(boardSize,
                                                                    javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                    javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                    javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(
                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addGroup(
                                                        jPanel3Layout
                                                                .createParallelGroup(
                                                                    javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(jLabel4)
                                                                .addComponent(timeout,
                                                                    javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                    javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                    javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(
                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(runGame)
                                                    .addGap(17, 17, 17)
                                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18)
                                                    .addComponent(jLabel8))
                                        .addComponent(versionPanel, javax.swing.GroupLayout.DEFAULT_SIZE,
                                            javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addContainerGap()));

        jTabbedPane1.addTab("Ustawienia", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            layout.createSequentialGroup().addContainerGap().addComponent(jTabbedPane1).addContainerGap()));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            layout.createSequentialGroup().addContainerGap().addComponent(jTabbedPane1).addContainerGap()));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private Preferences getPrefs() {
        return Preferences.userNodeForPackage(MainWindow.class);
    }


    private int getColorIndex(Player.Color player) {
        return (player == Player.Color.PLAYER1 ? 0 : 1);
    }


    private String getColorName(Player.Color player) {
        String[] color = new String[] { "pomarańczowy", "niebieski" };
        return color[getColorIndex(player)];
    }


    private Color getPlayerColor(Player.Color player) {
        switch (player) {
            default:
            case EMPTY:
                return Color.GRAY;
            case PLAYER1:
                return Color.ORANGE;
            case PLAYER2:
                return Color.BLUE;
        }
    }


    private void announceWinner(Player.Color winner) {
        String text;
        if (winner == null) {
            text = "Gra została przerwana bez rozstrzygnięcia";
        } else if (winner == Player.Color.EMPTY) {
            text = "Remis";
        } else {
            int index = getColorIndex(winner);
            text = String.format("Wygrał %s (%s)", players[index].getName(), getColorName(winner));
        }
        JOptionPane.showMessageDialog(MainWindow.this, text, "Koniec gry", JOptionPane.INFORMATION_MESSAGE);
    }


    private void updateNextPlayer(Player.Color nextPlayer) {
        this.nextPlayer.setText(getColorName(nextPlayer));
        this.nextPlayer.setForeground(getPlayerColor(nextPlayer));
    }


    private void runGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runGameActionPerformed
        if (boardFactory == null) {
            return;
        }
        getPrefs().put(PREF_PLAYER1, player1.getText());
        getPrefs().put(PREF_PLAYER2, player2.getText());
        try {
            jTabbedPane1.setEnabledAt(1, false);
            final GameEngine g = setupGame();
            new SwingWorker<Player.Color, Object>() {

                @Override
                protected Player.Color doInBackground()
                        throws Exception {
                    Player.Color result = g.play(new Callback() {

                        @Override
                        public void update(final Player.Color nextPlayer, final Board b, final Move m) {
                            EventQueue.invokeLater(new Runnable() {

                                public void run() {
                                    updateNextPlayer(nextPlayer);
                                    ((BoardViewPanel) boardView).updateBoard(b, m);
                                }
                            });
                        }
                    });
                    return result;
                }


                @Override
                protected void done() {
                    try {
                        ((BoardViewPanel) boardView).clearFieldMouseListeners();
                        jTabbedPane1.setEnabledAt(1, true);
                        announceWinner(this.get());
                    } catch (InterruptedException | ExecutionException ex) {
                        JOptionPane.showMessageDialog(MainWindow.this, ex, "Bład gry", JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }.execute();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex, "Bład gry", JOptionPane.ERROR_MESSAGE);
        }
        this.jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_runGameActionPerformed


    private void selectPlayerFile(JTextField textField) {
        fileDialog.setSelectedFile(new File(textField.getText()).getAbsoluteFile());
        if (fileDialog.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                textField.setText(fileDialog.getSelectedFile().getCanonicalPath());
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }


    private void selectPlayer1FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPlayer1FileActionPerformed
        selectPlayerFile(player1);
    }//GEN-LAST:event_selectPlayer1FileActionPerformed


    private void selectPlayer2FileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPlayer2FileActionPerformed
        selectPlayerFile(player2);
    }//GEN-LAST:event_selectPlayer2FileActionPerformed


    private String guessContentType(String text) {
        if (text.toLowerCase().contains("<html>")) {
            return "text/html";
        } else {
            return "text/plain";
        }
    }


    private void displayRules() {
        String text = boardFactory.getRules();
        try {
            URL url = new URL(text);
            text = String.format("<html><a href=\"%1$s\">%1$s</a></html>", text);
        } catch (MalformedURLException swallow) {
        }
        rules.setContentType(guessContentType(text));
        rules.setText(text);
    }


    private void gameSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameSelectionActionPerformed
        BoardFactory selected = (BoardFactory) ((JComboBox) evt.getSource()).getSelectedItem();
        getPrefs().putInt(PREF_SELECTED_GAME, ((JComboBox) evt.getSource()).getSelectedIndex());
        this.boardFactory = selected;
        this.boardSize.setEnabled(false);
        displayRules();
        for (Parameter<?> p : boardFactory.getConfigurationOptions()) {
            if (BoardFactory.BOARD_SIZE.equals(p.getName())) {
                this.boardSize.setEnabled(true);
                IntegerParameter ip = (IntegerParameter) p;
                Comparable<Integer> min = ip.hasMin() ? ip.getMin() : 1;
                Comparable<Integer> max = ip.hasMax() ? (Integer) ip.getMax() : null;
                SpinnerNumberModel model = new SpinnerNumberModel(ip.getDefaultValue(), min, max, 1);
                this.boardSize.setModel(model);
            }
        }
    }//GEN-LAST:event_gameSelectionActionPerformed


    private void rulesHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_rulesHyperlinkUpdate
        if (HyperlinkEvent.EventType.ACTIVATED.equals(evt.getEventType())) {
            try {
                Desktop.getDesktop().browse(evt.getURL().toURI());
            } catch (URISyntaxException | IOException ex) {
                JOptionPane.showMessageDialog(this, "Nie można uruchomić przeglądarki", "Błąd",
                    JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_rulesHyperlinkUpdate


    private Manifest manifest = findMyManifest();


    private Manifest findMyManifest() {
        Enumeration<URL> resources;
        try {
            resources = MainWindow.class.getClassLoader().getResources("META-INF/MANIFEST.MF");
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
        while (resources.hasMoreElements()) {
            try (InputStream s = resources.nextElement().openStream()) {
                Manifest mf = new Manifest(s);
                String mainClass = mf.getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);
                if (getClass().getName().equals(mainClass)) {
                    return mf;
                }
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return null;
    }


    private String readVersionFromManifest() {
        if (manifest != null) {
            String v = manifest.getMainAttributes().getValue("Build-Version");
            if (v != null && !v.isEmpty()) {
                return v;
            }
        }
        return "Błąd";
    }


    private String readVersionFromServer() {
        try {
            if (manifest != null) {
                URL url = new URL(manifest.getMainAttributes().getValue("Version-URL"));
                try (BufferedReader r = new BufferedReader(new InputStreamReader(url.openStream()))) {
                    String s = r.readLine();
                    if (s != null && !s.isEmpty()) {
                        return s;
                    }
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "Błąd";
    }


    private Color defaultColor = null;


    private void checkVersion() {
        SwingWorker worker = new SwingWorker<String[], Void>() {

            @Override
            protected String[] doInBackground()
                    throws Exception {
                String current = readVersionFromManifest();
                String newest = readVersionFromServer();
                return new String[] { current, newest };
            }


            @Override
            protected void done() {
                try {
                    String[] versions = get();
                    String current = versions[0];
                    String newest = versions[1];
                    currentVersion.setText(current);
                    newestVersion.setText(newest);
                    if (defaultColor == null) {
                        defaultColor = currentVersion.getForeground();
                    }
                    if (current.compareTo(newest) < 0) {
                        currentVersion.setForeground(Color.RED);
                        askForUpdate.setVisible(true);
                    } else {
                        currentVersion.setForeground(defaultColor);
                        askForUpdate.setVisible(false);
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        worker.execute();
    }


    private void checkVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkVersionActionPerformed
        checkVersion();
    }//GEN-LAST:event_checkVersionActionPerformed


    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel askForUpdate;
    private javax.swing.JSpinner boardSize;
    private javax.swing.JPanel boardView;
    private javax.swing.JButton checkVersion;
    private javax.swing.JLabel currentVersion;
    private javax.swing.JPanel gameInfo;
    private javax.swing.JComboBox gameSelection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel newestVersion;
    private javax.swing.JLabel nextPlayer;
    private javax.swing.JTextField player1;
    private javax.swing.JTextField player2;
    private javax.swing.JEditorPane rules;
    private javax.swing.JButton runGame;
    private javax.swing.JButton selectPlayer1File;
    private javax.swing.JButton selectPlayer2File;
    private javax.swing.JSpinner timeout;
    private javax.swing.JPanel versionPanel;


    // End of variables declaration//GEN-END:variables

    private Class<? extends Player> getClass(JTextField textField) {
        String jar = textField.getText();
        if (!jar.isEmpty()) {
            try {
                return MetaPlayerLoader.INSTANCE.load(jar);
            } catch (PlayerLoadingException ex) {
                JOptionPane.showMessageDialog(this, ex, "Błąd ładowania klasy", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        } else {
            return null;
        }
    }


    private GameEngine setupGame()
            throws InstantiationException, IllegalAccessException {
        Class<? extends Player>[] cl = new Class[] { getClass(player1), getClass(player2), };
        int boardSize = ((SpinnerNumberModel) this.boardSize.getModel()).getNumber().intValue();
        Map<String, Object> config = new HashMap<>();
        config.put(BoardFactory.BOARD_SIZE, boardSize);
        boardFactory.configure(config);
        GameEngine g = new GameEngineImpl(boardFactory);
        g.setTimeout(((SpinnerNumberModel) timeout.getModel()).getNumber().intValue());
        players = new Player[cl.length];
        for (int i = 0; i < cl.length; ++i) {
            if (cl[i] != null) {
                players[i] = cl[i].newInstance();
            } else {
                players[i] = new ArtificialArtificialIntelligence((BoardViewPanel) this.boardView);
            }
            g.addPlayer(players[i]);
        }
        return g;
    }
}
